#include <Wire.h>
#include "rgb_lcd.h"
#include <WiFiS3.h>

// Wi-Fi credentials
const char* ssid = "winston";
const char* password = "winstonscastle";

// ThingSpeak settings
const char* server = "api.thingspeak.com";
const char* apiKey = "FUOV4U12MM7YRSW7";

// Sensor pin and variables
#define SENSOR_PIN 4
#define BUZZER_PIN 5
long duration;
float distance;

// Grove RGB LCD setup
rgb_lcd lcd;

// LCD backlight colors
const int colorR = 0;
const int colorG = 255;
const int colorB = 0;

WiFiClient client;

void setupWiFi() {
    Serial.println("Connecting to WiFi...");
    lcd.setCursor(0, 0);
    lcd.print("WiFi: Connecting");
    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }

    Serial.println("\nWiFi connected!");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("WiFi: Connected");
    lcd.setCursor(0, 1);
    lcd.print(WiFi.localIP());
    delay(2000);
    lcd.clear();
}

float readSensor() {
    // Trigger the ultrasonic sensor
    pinMode(SENSOR_PIN, OUTPUT);
    digitalWrite(SENSOR_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(SENSOR_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(SENSOR_PIN, LOW);

    // Measure the echo
    pinMode(SENSOR_PIN, INPUT);
    duration = pulseIn(SENSOR_PIN, HIGH);

    // Calculate distance in cm
    float distance = (duration * 0.034) / 2.0;
    return distance;
}

void sendToThingSpeak(float distance) {
    if (client.connect(server, 80)) {
        Serial.println("Connected to ThingSpeak!");

        // Prepare the HTTP request
        String data = "api_key=" + String(apiKey) + "&field1=" + String(distance);
        client.println("POST /update HTTP/1.1");
        client.println("Host: api.thingspeak.com");
        client.println("Connection: close");
        client.println("Content-Type: application/x-www-form-urlencoded");
        client.print("Content-Length: ");
        client.println(data.length());
        client.println();
        client.println(data);

        // Wait for response
        while (client.connected() || client.available()) {
            if (client.available()) {
                String response = client.readStringUntil('\n');
                Serial.println(response);
            }
        }

        client.stop();
        Serial.println("Data sent to ThingSpeak!");
        lcd.setCursor(0, 1);
        lcd.print("Connection: OK ");
    } else {
        Serial.println("Connection to ThingSpeak failed.");
        lcd.setCursor(0, 1);
        lcd.print("ThingSpeak: Fail");
    }
}

void checkBinStatus(float distance) {
    lcd.setCursor(0, 0);
    if (distance < 6.0) {
        // Bin is full
        lcd.print("Bin Full!");
        Serial.println("Bin Full!");

        // Activate the buzzer
        digitalWrite(BUZZER_PIN, HIGH);
        delay(1000);
        digitalWrite(BUZZER_PIN, LOW);
    } else {
        // Bin is OK
        lcd.print("Bin OK!");
        Serial.println("Bin OK!");
    }
}

void setup() {
    Serial.begin(115200);
    lcd.begin(16, 2);
    lcd.setRGB(colorR, colorG, colorB);
    lcd.setCursor(0, 0);
    lcd.print("Initializing...");
    delay(2000);

    pinMode(BUZZER_PIN, OUTPUT);

    // Step 1: Connect to Wi-Fi
    setupWiFi();
}

void loop() {
    // Step 2: Read sensor data
    distance = readSensor();
    Serial.print("Distance: ");
    Serial.print(distance);
    Serial.println(" cm");

    // Step 3: Check bin status and update LCD
    checkBinStatus(distance);

    // Step 4: Send data to ThingSpeak
    sendToThingSpeak(distance);

    // Step 5: Wait before sending again (ThingSpeak limits to 15-second intervals)
    delay(15000);
}
